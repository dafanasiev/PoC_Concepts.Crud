// <auto-generated />
using System;
using Concepts.Crud.Infrastructure.Postgres;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Concepts.Crud.Infrastructure.Postgres.Migrations
{
    [DbContext(typeof(CrudContext))]
    [Migration("20250820073825_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("crud")
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Concepts.Crud.Domain.AggregatesModel.ActivityAggregate.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("activity_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(true)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .IsUnicode(true)
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<long?>("GC")
                        .HasColumnType("bigint")
                        .HasColumnName("gc");

                    b.Property<bool>("IsGroup")
                        .HasColumnType("boolean")
                        .HasColumnName("is_group");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(true)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("activity_type_id");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.HasIndex(new[] { "GC" }, "gc is null");

                    b.ToTable("activity", "crud");
                });

            modelBuilder.Entity("Concepts.Crud.Domain.AggregatesModel.ActivityRelationshipAggregate.ActivityRelationship", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("activity_relationship_id");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uuid")
                        .HasColumnName("activity_id");

                    b.Property<Guid>("EntityRefId")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_ref_id");

                    b.Property<long?>("GC")
                        .HasColumnType("bigint")
                        .HasColumnName("gc");

                    b.Property<Guid>("RelationshipTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("relationship_type_id");

                    b.HasKey("Id");

                    b.HasIndex("EntityRefId");

                    b.HasIndex("RelationshipTypeId");

                    b.HasIndex("ActivityId", "RelationshipTypeId", "EntityRefId")
                        .IsUnique()
                        .HasFilter("gc IS NOT NULL");

                    b.HasIndex(new[] { "GC" }, "gc is null")
                        .HasDatabaseName("gc is null1");

                    b.ToTable("activity_relationship", "crud");
                });

            modelBuilder.Entity("Concepts.Crud.Domain.AggregatesModel.ActivityTypeAggregate.ActivityType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("activity_type_id");

                    b.Property<long?>("GC")
                        .HasColumnType("bigint")
                        .HasColumnName("gc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(true)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "GC" }, "gc is null")
                        .HasDatabaseName("gc is null2");

                    b.ToTable("activity_type", "crud");
                });

            modelBuilder.Entity("Concepts.Crud.Domain.AggregatesModel.ClientRequestAggregate.ClientRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("client_request_id");

                    b.Property<string>("Data")
                        .HasColumnType("jsonb")
                        .HasColumnName("data");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(true)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamptz")
                        .HasColumnName("time");

                    b.HasKey("Id");

                    b.ToTable("client_request", "crud");
                });

            modelBuilder.Entity("Concepts.Crud.Domain.AggregatesModel.EntityRefAggregate.EntityRef", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("entity_ref_id");

                    b.Property<long?>("GC")
                        .HasColumnType("bigint")
                        .HasColumnName("gc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(true)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<string>("ReferredClassName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(true)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("referred_class_name");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "GC" }, "gc is null")
                        .HasDatabaseName("gc is null3");

                    b.ToTable("entity_ref", "crud");
                });

            modelBuilder.Entity("Concepts.Crud.Domain.AggregatesModel.RelationshipTypeAggregate.RelationshipType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("relationship_type_id");

                    b.Property<string>("Description")
                        .IsUnicode(true)
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<long?>("GC")
                        .HasColumnType("bigint")
                        .HasColumnName("gc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(true)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "GC" }, "gc is null")
                        .HasDatabaseName("gc is null4");

                    b.ToTable("relationship_type", "crud");
                });

            modelBuilder.Entity("Concepts.Crud.Domain.AggregatesModel.ActivityAggregate.Activity", b =>
                {
                    b.HasOne("Concepts.Crud.Domain.AggregatesModel.ActivityTypeAggregate.ActivityType", "Type")
                        .WithMany("ActivityList")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Concepts.Crud.Domain.AggregatesModel.ActivityRelationshipAggregate.ActivityRelationship", b =>
                {
                    b.HasOne("Concepts.Crud.Domain.AggregatesModel.ActivityAggregate.Activity", "Activity")
                        .WithMany("RelationshipList")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Concepts.Crud.Domain.AggregatesModel.EntityRefAggregate.EntityRef", "EntityRef")
                        .WithMany("ActivityRelationshipList")
                        .HasForeignKey("EntityRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Concepts.Crud.Domain.AggregatesModel.RelationshipTypeAggregate.RelationshipType", "RelationshipType")
                        .WithMany("ActivityRelationshipList")
                        .HasForeignKey("RelationshipTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("EntityRef");

                    b.Navigation("RelationshipType");
                });

            modelBuilder.Entity("Concepts.Crud.Domain.AggregatesModel.ActivityAggregate.Activity", b =>
                {
                    b.Navigation("RelationshipList");
                });

            modelBuilder.Entity("Concepts.Crud.Domain.AggregatesModel.ActivityTypeAggregate.ActivityType", b =>
                {
                    b.Navigation("ActivityList");
                });

            modelBuilder.Entity("Concepts.Crud.Domain.AggregatesModel.EntityRefAggregate.EntityRef", b =>
                {
                    b.Navigation("ActivityRelationshipList");
                });

            modelBuilder.Entity("Concepts.Crud.Domain.AggregatesModel.RelationshipTypeAggregate.RelationshipType", b =>
                {
                    b.Navigation("ActivityRelationshipList");
                });
#pragma warning restore 612, 618
        }
    }
}
