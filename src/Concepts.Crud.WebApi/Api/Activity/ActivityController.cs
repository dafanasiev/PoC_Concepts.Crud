/*
 * Activity Specification
 *
 * API позволяет управлять каталогом действий
 *
 * OpenAPI spec version: 1.0.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Concepts.Crud.WebApi.Application.Commands;
using Concepts.Crud.WebApi.Application.Models;
using Concepts.Crud.WebApi.Application.Queries;
using Concepts.Crud.WebApi.Extensions;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Http.HttpResults;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;

namespace Concepts.Crud.WebApi.Api.Activity;

/// <summary>
/// 
/// </summary>
[ApiController]
public class ActivityController : ControllerBase
{
    /// <summary>
    /// createActivity
    /// </summary>
    /// <remarks>Создать новое действие</remarks>
    /// <param name="body">При создании в тело запроса передаем ее полное описание</param>
    /// <response code="201">Specification created</response>
    /// <response code="400">Сервер не понимает запрос из-за неверного синтаксиса</response>
    /// <response code="401">Для получения запрашиваемого ответа нужна аутентификация</response>
    /// <response code="403">У клиента нет прав доступа к содержимому</response>
    /// <response code="500">Сервер столкнулся с ситуацией, которую он не знает как обработать</response>
    /// <response code="502">Сервер, во время работы в качестве шлюза для получения ответа, нужного для обработки запроса, получил недействительный (недопустимый) ответ</response>
    /// <response code="503">Сервис недоступен</response>
    [HttpPost]
    [Route("/activity")]
    [ValidateModelState]
    [SwaggerOperation("CreateActivity")]
    [SwaggerResponse(statusCode: 201, type: typeof(List<Application.Models.Activity>),
        description: "Specification created")]
    public async Task<Results<
            Ok<ICollection<Application.Models.Activity>>,
            ProblemHttpResult>>
        CreateActivity(
            [FromHeader(Name = "x-requestid")] Guid? requestId,
            [FromBody, Required] CreateActivityRequest body,
            [AsParameters] ActivityServices services
        )
    {
        requestId ??= Guid.NewGuid();

        services.Logger.LogInformation(
            "Receive request: {RequestName}", body.GetGenericTypeName()
        );

        using (services.Logger.BeginScope(new List<KeyValuePair<string, object>>
                   {new("IdentifiedCommandId", requestId.Value)}))
        {
            try
            {
                var cmd = new CreateActivityCommand(body);
                var cmdIdn = new IdentifiedCommand<CreateActivityCommand, ICollection<Application.Models.Activity>>(
                    cmd,
                    requestId.Value
                );
                services.Logger.LogInformation(
                    "Sending command: {CommandName} {RequestId} ({@Request})",
                    cmd.GetGenericTypeName(),
                    cmdIdn.Id,
                    cmdIdn);

                var result = await services.Mediator.Send(cmdIdn);


                if (result == null)
                {
                    // never
                    throw new InvalidOperationException(
                        $"Unable to create activity: {nameof(CreateActivityCommand)} returns no data");
                }

                return TypedResults.Ok(result);
            }
            catch (Exception ex)
            {
                services.Logger.LogError(ex, "Unable to create activity");
                return TypedResults.Problem(
                    instance: services.ProblemHrefProvider.GetExecuteCommandProblemRef(nameof(CreateActivityCommand),
                        requestId.Value),
                    title: "Unable to create activity"
                );
            }
        }
    }


    /// <summary>
    /// deleteActivityById
    /// </summary>
    /// <remarks>Удалить действие по идентификатору</remarks>
    /// <param name="id">Идентификатор сущности в системе</param>
    /// <response code="204">No content</response>
    /// <response code="400">Bad request</response>
    /// <response code="401">Unauthorized</response>
    /// <response code="404">Not Found</response>
    [HttpDelete]
    [Route("/activity/{id}")]
    [ValidateModelState]
    [SwaggerOperation("deleteActivityById")]
    public async Task<Results<
            Ok,
            ProblemHttpResult>>
        DeleteActivityById(
            [FromHeader(Name = "x-requestid")] Guid? requestId,
            [FromRoute] [Required] Guid id,
            [AsParameters] ActivityServices services
        )
    {
        requestId ??= Guid.NewGuid();

        services.Logger.LogInformation("Receive delete activity request: {ActivityId}", id);

        using (services.Logger.BeginScope(new List<KeyValuePair<string, object>>
                   {new("IdentifiedCommandId", requestId.Value)}))
        {
            try
            {
                var cmd = new DeleteActivityByIdCommand(id);
                var cmdIdn =
                    new IdentifiedCommand<DeleteActivityByIdCommand, bool>(
                        cmd,
                        requestId.Value
                    );
                services.Logger.LogInformation(
                    "Sending command: {CommandName} {RequestId} ({@Request})",
                    cmd.GetGenericTypeName(),
                    cmdIdn.Id,
                    cmdIdn);

                var result = await services.Mediator.Send(cmdIdn);

                if (!result)
                {
                    // never
                    throw new InvalidOperationException($"Unable to delete activity: {nameof(DeleteActivityByIdCommand)} returns no data");
                }

                return TypedResults.Ok();
            }
            catch (Exception ex)
            {
                services.Logger.LogError(ex, "Unable to delete activity");
                return TypedResults.Problem(
                    instance: services.ProblemHrefProvider.GetExecuteCommandProblemRef(nameof(DeleteActivityByIdCommand),
                        requestId.Value),
                    title: "Unable to delete activity"
                );
            }
        }
    }

    /// <summary>
    /// getActivity
    /// </summary>
    /// <remarks>Получить список действий</remarks>
    /// <param name="description">Поиск сущности по описанию</param>
    /// <param name="name">Поиск сущности по наименованию</param>
    /// <param name="code">Поиск сущности по коду</param>
    /// <response code="200">OK</response>
    /// <response code="204">Нет содержимого для ответа на запрос, но заголовки ответа, которые могут быть полезны, присылаются</response>
    /// <response code="206">Сервер удачно выполнил частичный GET-запрос, возвратив только часть сообщения</response>
    /// <response code="400">Bad request</response>
    /// <response code="401">Ошибка авторизации</response>
    /// <response code="403">запрос к странице, доступ к которой ограничен</response>
    /// <response code="500">Другие ошибки</response>
    /// <response code="502">Сервер подключения получает некорректный ответ</response>
    /// <response code="503">Сервис недоступен</response>
    [HttpGet]
    [Route("/activity")]
    [ValidateModelState]
    [SwaggerOperation("GetActivity")]
    [SwaggerResponse(statusCode: 200, type: typeof(List<Application.Models.Activity>), description: "OK")]
    public async Task<Results<
            Ok<ICollection<Application.Models.Activity>>,
            NoContent,
            ProblemHttpResult>>
        GetActivity(
            [FromQuery] string? description,
            [FromQuery] string? name,
            [FromQuery] string? code,
            [AsParameters] ActivityServices services,
            CancellationToken ct
        )
    {
        try
        {
            var activityTypes = await services.Queries.GetActivity(
                new IActivityQueries.GetActivityFilter(description, name, code),
                ct
            );

            if (activityTypes.Count == 0)
            {
                return TypedResults.NoContent();
            }

            return TypedResults.Ok(activityTypes);
        }
        catch (Exception ex)
        {
            services.Logger.LogError(ex, "Unable to get activity");
            return TypedResults.Problem();
        }
    }

    /// <summary>
    /// getActivityById
    /// </summary>
    /// <remarks>Получить действие по индентификатору</remarks>
    /// <param name="id">Идентификатор сущности в системе</param>
    /// <response code="200">+OK</response>
    /// <response code="204">+Нет содержимого для ответа на запрос, но заголовки ответа, которые могут быть полезны, присылаются</response>
    /// <response code="206">Сервер удачно выполнил частичный GET-запрос, возвратив только часть сообщения</response>
    /// <response code="400">+Bad request</response>
    /// <response code="401">Ошибка авторизации</response>
    /// <response code="403">запрос к странице, доступ к которой ограничен</response>
    /// <response code="404">+Not Found</response>
    /// <response code="500">+Другие ошибки</response>
    /// <response code="502">Сервер подключения получает некорректный ответ</response>
    /// <response code="503">Сервис недоступен</response>
    [HttpGet]
    [Route("/activity/{id}")]
    [ValidateModelState]
    [SwaggerOperation("GetActivityById")]
    [SwaggerResponse(statusCode: 200, type: typeof(Application.Models.Activity), description: "OK")]
    public async Task<Results<
            Ok<Application.Models.Activity>,
            NotFound,
            BadRequest,
            ProblemHttpResult>>
        GetActivityById(
            [FromRoute] [Required] string id,
            [AsParameters] ActivityServices services,
            CancellationToken ct
        )
    {
        try
        {
            if (!Guid.TryParseExact(id, "D", out var activityId))
            {
                return TypedResults.BadRequest();
            }

            var activityType = await services.Queries.GetActivityById(activityId, ct);
            return TypedResults.Ok(activityType);
        }
        catch (KeyNotFoundException ex)
        {
            return TypedResults.NotFound();
        }
        catch (Exception ex)
        {
            services.Logger.LogError(ex, "Unable to get activity by {id}", id);
            return TypedResults.Problem();
        }
    }

    /// <summary>
    /// getActivityGraph
    /// </summary>
    /// <remarks>Получить граф списка действий</remarks>
    /// <response code="200">OK</response>
    /// <response code="204">Нет содержимого для ответа на запрос, но заголовки ответа, которые могут быть полезны, присылаются</response>
    /// <response code="206">Сервер удачно выполнил частичный GET-запрос, возвратив только часть сообщения</response>
    /// <response code="400">Bad request</response>
    /// <response code="401">Ошибка авторизации</response>
    /// <response code="403">запрос к странице, доступ к которой ограничен</response>
    /// <response code="500">Другие ошибки</response>
    /// <response code="502">Сервер подключения получает некорректный ответ</response>
    /// <response code="503">Сервис недоступен</response>
    [HttpGet]
    [Route("/activity/graph")]
    [ValidateModelState]
    [SwaggerOperation("GetActivityGraph")]
    [SwaggerResponse(statusCode: 200, type: typeof(List<ActivityGraph>), description: "OK")]
    public async Task<Results<
            Ok<ICollection<ActivityGraph>>,
            NotFound,
            ProblemHttpResult>>
        GetActivityGraph(
            [AsParameters] ActivityServices services,
            CancellationToken ct
        )
    {
#if false
        try
        {
            var activityGraph = await services.Queries.GetActivityGraph(ct);

            if (ReferenceEquals(null, activityGraph))
            {
                return TypedResults.NotFound();
            }

            return TypedResults.Ok(activityGraph);
        }
        catch (Exception ex)
        {
            services.Logger.LogError(ex, "Unable to get activity graph");
            return TypedResults.Problem();
        }
#endif
        throw new NotImplementedException();
    }

    /// <summary>
    /// patchActivityById
    /// </summary>
    /// <remarks>Обновить описательные (собственные) атрибуты действия</remarks>
    /// <param name="body"></param>
    /// <param name="id">Идентификатор сущности в системе</param>
    /// <response code="200">OK</response>
    /// <response code="400">Bad Request</response>
    /// <response code="401">Unauthorized</response>
    /// <response code="403">Forbidden</response>
    /// <response code="404">Not Found</response>
    /// <response code="500">Internal Server Error</response>
    /// <response code="502">Bad Gateway</response>
    /// <response code="503">Service Unavailable</response>
    [HttpPatch]
    [Route("/activity/{id}")]
    [ValidateModelState]
    [SwaggerOperation("PatchActivityById")]
    [SwaggerResponse(statusCode: 200, type: typeof(Application.Models.Activity), description: "OK")]
    public async Task<Results<
            Ok<Application.Models.Activity>,
            BadRequest,
            ProblemHttpResult>>
        PatchActivityById(
            [FromHeader(Name = "x-requestid")] Guid? requestId,
            [FromBody] UpdateActivityRequest body,
            [FromRoute] [Required] string id,
            [AsParameters] ActivityServices services
        )
    {
        requestId ??= Guid.NewGuid();

        services.Logger.LogInformation("Receive patch activity request: {ActivityId}", id);

        using (services.Logger.BeginScope(new List<KeyValuePair<string, object>>
                   {new("IdentifiedCommandId", requestId.Value)}))
        {
            try
            {
                if (!Guid.TryParseExact(id, "D", out var activityId))
                {
                    services.Logger.LogError("Invalid activity id in patch activity request");
                    return TypedResults.BadRequest();
                }
                body.Id = activityId;
                var cmd = new UpdateActivityCommand(body);
                var cmdIdn =
                    new IdentifiedCommand<UpdateActivityCommand, Application.Models.Activity>(
                        cmd,
                        requestId.Value
                    );
                services.Logger.LogInformation(
                    "Sending command: {CommandName} {RequestId} ({@Request})",
                    cmd.GetGenericTypeName(),
                    cmdIdn.Id,
                    cmdIdn);

                var result = await services.Mediator.Send(cmdIdn);

                return TypedResults.Ok(result);
            }
            catch (Exception ex)
            {
                services.Logger.LogError(ex, "Unable to update activity");
                return TypedResults.Problem(
                    instance: services.ProblemHrefProvider.GetExecuteCommandProblemRef(nameof(DeleteActivityByIdCommand),
                        requestId.Value),
                    title: "Unable to update activity"
                );
            }
        }
    }
}