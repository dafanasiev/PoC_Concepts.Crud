/*
 * Activity Specification
 *
 * API позволяет управлять каталогом действий
 *
 * OpenAPI spec version: 1.0.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Http.HttpResults;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;

namespace Concepts.Crud.WebApi.Api.ActivityType;

/// <summary>
/// 
/// </summary>
[ApiController]
public class ActivityTypeController : ControllerBase
{
    /// <summary>
    /// getActivityType
    /// </summary>
    /// <remarks>Получить список типов Activity</remarks>
    /// <response code="200">+Success</response>
    /// <response code="204">+Нет содержимого для ответа на запрос, но заголовки ответа, которые могут быть полезны, присылаются</response>
    /// <response code="206">Сервер удачно выполнил частичный GET-запрос, возвратив только часть сообщения</response>
    /// <response code="400">+Bad request</response>
    /// <response code="401">Ошибка авторизации</response>
    /// <response code="403">запрос к странице, доступ к которой ограничен</response>
    /// <response code="500">+Другие ошибки</response>
    /// <response code="502">Сервер подключения получает некорректный ответ</response>
    /// <response code="503">Сервис недоступен</response>
    [HttpGet]
    [Route("/activity/type/")]
    [ValidateModelState]
    [SwaggerOperation("GetActivityType")]
    [SwaggerResponse(statusCode: 200, type: typeof(List<Application.Models.ActivityType>), description: "Success")]
    public async Task<Results<
            Ok<ICollection<Application.Models.ActivityType>>,
            NoContent,
            ProblemHttpResult>>
        GetActivityType(
            [AsParameters] ActivityTypeServices services,
            CancellationToken ct
        )
    {
        try
        {
            var activityTypes = await services.Queries.GetActivityTypeAsync(ct);
            if (activityTypes.Count == 0)
            {
                return TypedResults.NoContent();
            }

            return TypedResults.Ok(activityTypes);
        }
        catch (Exception ex)
        {
            services.Logger.LogError(ex, "Unable to get activity types");
            return TypedResults.Problem();
        }
    }
}