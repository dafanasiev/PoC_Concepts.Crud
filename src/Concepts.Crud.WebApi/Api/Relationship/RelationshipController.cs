/*
 * Activity Specification
 *
 * API позволяет управлять каталогом действий
 *
 * OpenAPI spec version: 1.0.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Concepts.Crud.WebApi.Application.Models;
using Concepts.Crud.WebApi.Application.Queries;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Http.HttpResults;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;

namespace Concepts.Crud.WebApi.Api.Relationship
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class RelationshipController : ControllerBase
    {
        /// <summary>
        /// createActivityRelationship
        /// </summary>
        /// <remarks>Добавить связь Activity</remarks>
        /// <param name="body"></param>
        /// <param name="activityId">Идентификатор Activity</param>
        /// <response code="201">Created</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="502">Bad Gateway</response>
        /// <response code="503">Service Unavailable</response>
        [HttpPost]
        [Route("/activity/{activityId}/relationship")]
        [ValidateModelState]
        [SwaggerOperation("CreateActivityRelationship")]
        [SwaggerResponse(statusCode: 201, type: typeof(List<ActivityRelationship>), description: "Created")]
        public async Task<Results<
            Ok<ICollection<ActivityRelationship>>,
            NoContent,
            NotFound, //TODO: spec_error
            BadRequest,
            ProblemHttpResult>>
            CreateActivityRelationship(
                [FromBody] List<ActivityRelationship> body, 
                [FromRoute] [Required] string activityId,
                [AsParameters] RelationshipServices services,
                CancellationToken ct
                )
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// deleteActivityRelationshipById
        /// </summary>
        /// <remarks>Удалить связь Activity по id Activity и id связи</remarks>
        /// <param name="activityId">идентификатор Activity</param>
        /// <param name="id">идентификатор связи</param>
        /// <response code="200">OK</response>
        /// <response code="204">No Content</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">Not Found</response>
        [HttpDelete]
        [Route("/activity/{activityId}/relationship/{Id}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteActivityRelationshipById")]
        public virtual IActionResult DeleteActivityRelationshipById([FromRoute] [Required] string activityId, [FromRoute] [Required] string id)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// getActivityRelationship
        /// </summary>
        /// <remarks>Получить список связей Activity</remarks>
        /// <param name="activityId">Идентификатор Activity</param>
        /// <response code="200">+Success</response>
        /// <response code="204">+Нет содержимого для ответа на запрос, но заголовки ответа, которые могут быть полезны, присылаются</response>
        /// <response code="400">Bad request</response>
        /// <response code="401">Ошибка авторизации</response>
        /// <response code="403">запрос к странице, доступ к которой ограничен</response>
        /// <response code="500">+Другие ошибки</response>
        /// <response code="502">Сервер подключения получает некорректный ответ</response>
        /// <response code="503">Сервис недоступен</response>
        [HttpGet]
        [Route("/activity/{activityId}/relationship")]
        [ValidateModelState]
        [SwaggerOperation("GetActivityRelationship")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ActivityRelationship>), description: "Success")]
        public async Task<Results<
                Ok<ICollection<ActivityRelationship>>,
                NoContent,
                NotFound, //TODO: spec_error
                BadRequest,
                ProblemHttpResult>>
            GetActivityRelationship(
                [FromRoute] [Required] string activityId,
                [AsParameters] RelationshipServices services,
                CancellationToken ct
            )
        {
            try
            {
                if (!Guid.TryParseExact(activityId, "D", out Guid activityIdGuid))
                {
                    return TypedResults.BadRequest();
                }

                var activityRelationships = await services.Queries.GetActivityRelationshipAsync(activityIdGuid, ct);
                if (activityRelationships.Count == 0)
                {
                    return TypedResults.NoContent();
                }

                return TypedResults.Ok(activityRelationships);
            }
            catch (KeyNotFoundException ex)
            {
                services.Logger.LogError(ex, "Unable to get ActivityRelationship for activity {activityId}", activityId);
                return TypedResults.NotFound();
            }
            catch (Exception ex)
            {
                services.Logger.LogError(ex, "Unable to get ActivityRelationship for activity {activityId}", activityId);
                return TypedResults.Problem();
            }
        }

        /// <summary>
        /// getActivityRelationshipById
        /// </summary>
        /// <remarks>Получить связь Activity по id Activity и id связи</remarks>
        /// <param name="activityId">идентификатор Activity</param>
        /// <param name="id">идентификатор связи</param>
        /// <response code="200">+OK</response>
        /// <response code="204">Нет содержимого для ответа на запрос, но заголовки ответа, которые могут быть полезны, присылаются</response>
        /// <response code="400">+Bad request</response>
        /// <response code="401">Ошибка авторизации</response>
        /// <response code="403">запрос к странице, доступ к которой ограничен</response>
        /// <response code="404">+Not Found</response>
        /// <response code="500">+Другие ошибки</response>
        /// <response code="502">Сервер подключения получает некорректный ответ</response>
        /// <response code="503">Сервис недоступен</response>
        [HttpGet]
        [Route("/activity/{activityId}/relationship/{Id}")]
        [ValidateModelState]
        [SwaggerOperation("GetActivityRelationshipById")]
        [SwaggerResponse(statusCode: 200, type: typeof(ActivityRelationship), description: "OK")]
        public async Task<Results<
                Ok<ActivityRelationship>,
                NotFound,
                BadRequest,
                ProblemHttpResult>>
            GetActivityRelationshipById(
                [FromRoute] [Required] string activityId,
                [FromRoute] [Required] string id,
                [AsParameters] RelationshipServices services,
                CancellationToken ct
            )
        {
            try
            {
                if (!Guid.TryParseExact(activityId, "D", out var activityIdGuid))
                {
                    return TypedResults.BadRequest();
                }

                if (!Guid.TryParseExact(id, "D", out var idGuid))
                {
                    return TypedResults.BadRequest();
                }

                var activityType = await services.Queries.GetActivityRelationshipById(activityIdGuid, idGuid, ct);
                return TypedResults.Ok(activityType);
            }
            catch (KeyNotFoundException ex)
            {
                services.Logger.LogError(ex, "Unable to get ActivityRelationship by {id} for activity {activityId}", id, activityId);
                return TypedResults.NotFound();
            }
            catch (Exception ex)
            {
                services.Logger.LogError(ex, "Unable to get ActivityRelationship by {id} for activity {activityId}", id, activityId);
                return TypedResults.Problem();
            }
        }

        /// <summary>
        /// putActivityRelationshipById
        /// </summary>
        /// <remarks>Обновить связь Activity по id Activity и id связи</remarks>
        /// <param name="body"></param>
        /// <param name="activityId">идентификатор Activity</param>
        /// <param name="id">идентификатор связи</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="502">Bad Gateway</response>
        /// <response code="503">Service Unavailable</response>
        [HttpPatch]
        [Route("/activity/{activityId}/relationship/{Id}")]
        [ValidateModelState]
        [SwaggerOperation("PutActivityRelationshipById")]
        [SwaggerResponse(statusCode: 200, type: typeof(ActivityRelationship), description: "OK")]
        public virtual IActionResult PutActivityRelationshipById([FromBody] ActivityRelationship body, [FromRoute] [Required] string activityId, [FromRoute] [Required] string id)
        {
            throw new NotImplementedException();
        }
    }
}