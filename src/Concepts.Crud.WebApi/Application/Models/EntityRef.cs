/*
 * Activity Specification
 *
 * API позволяет управлять каталогом действий
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.Runtime.Serialization;
using System.Text;

namespace Concepts.Crud.WebApi.Application.Models
{
    /// <summary>
    /// Ссылка на связанную с ресурсом сущность (базовый абстрактный класс)
    /// </summary>
    [DataContract]
    public partial class EntityRef : IEquatable<EntityRef>
    { 
        /// <summary>
        /// Сквозной системный идентификатор, уникальным образом идентифицирующий объект, на который ссылается сущность
        /// </summary>
        /// <value>Сквозной системный идентификатор, уникальным образом идентифицирующий объект, на который ссылается сущность</value>
        [Required]

        [DataMember(Name="id")]
        public Guid? Id { get; set; }

        /// <summary>
        /// Полная ссылка по которой можно сделать запрос к ресурсу, определенному ссылкой. Read-only атрибут \&quot;href используется в ответах на GET запросы.
        /// </summary>
        /// <value>Полная ссылка по которой можно сделать запрос к ресурсу, определенному ссылкой. Read-only атрибут \&quot;href используется в ответах на GET запросы.</value>
        [Required]

        [DataMember(Name="href")]
        public string Href { get; set; }

        /// <summary>
        /// Класс объекта, на который ссылается данный ресурс
        /// </summary>
        /// <value>Класс объекта, на который ссылается данный ресурс</value>
        [Required]

        [DataMember(Name="referredClassName")]
        public string ReferredClassName { get; set; }

        /// <summary>
        /// название
        /// </summary>
        /// <value>название</value>
        [Required]

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EntityRef {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("  ReferredClassName: ").Append(ReferredClassName).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonSerializer.Serialize(this);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EntityRef)obj);
        }

        /// <summary>
        /// Returns true if EntityRef instances are equal
        /// </summary>
        /// <param name="other">Instance of EntityRef to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EntityRef? other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Href == other.Href ||
                    Href != null &&
                    Href.Equals(other.Href)
                ) && 
                (
                    ReferredClassName == other.ReferredClassName ||
                    ReferredClassName != null &&
                    ReferredClassName.Equals(other.ReferredClassName)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Href != null)
                    hashCode = hashCode * 59 + Href.GetHashCode();
                    if (ReferredClassName != null)
                    hashCode = hashCode * 59 + ReferredClassName.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EntityRef left, EntityRef right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EntityRef left, EntityRef right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
