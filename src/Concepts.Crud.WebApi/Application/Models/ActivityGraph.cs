/*
 * Activity Specification
 *
 * API позволяет управлять каталогом действий
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.Runtime.Serialization;
using System.Text;

namespace Concepts.Crud.WebApi.Application.Models
{
    /// <summary>
    /// Базовый класс, описывающий спецификацию сущности \&quot;действие\&quot;
    /// </summary>
    [DataContract]
    public partial class ActivityGraph : IEquatable<ActivityGraph>
    { 
        /// <summary>
        /// уникальный идентификатор действий
        /// </summary>
        /// <value>уникальный идентификатор действий</value>

        [DataMember(Name="id")]
        public Guid? Id { get; set; }

        /// <summary>
        /// код действия понятный человеку. Требований уникальности нет
        /// </summary>
        /// <value>код действия понятный человеку. Требований уникальности нет</value>

        [DataMember(Name="code")]
        public string Code { get; set; }

        /// <summary>
        /// тип действия. Просто string, не FK
        /// </summary>
        /// <value>тип действия. Просто string, не FK</value>
        [Required]

        [DataMember(Name="type")]
        public string Type { get; set; }

        /// <summary>
        /// наименование действия
        /// </summary>
        /// <value>наименование действия</value>
        [Required]

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// признак, является ли действие группой действий (задач). Если не передается то false
        /// </summary>
        /// <value>признак, является ли действие группой действий (задач). Если не передается то false</value>

        [DataMember(Name="isGroup")]
        public bool? IsGroup { get; set; }

        /// <summary>
        /// массив связей в которых текущий объект выступает в качестве source_activity
        /// </summary>
        /// <value>массив связей в которых текущий объект выступает в качестве source_activity</value>

        [DataMember(Name="relationship")]
        public List<ActivityRelationship> Relationship { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ActivityGraph {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  IsGroup: ").Append(IsGroup).Append("\n");
            sb.Append("  Relationship: ").Append(Relationship).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonSerializer.Serialize(this);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ActivityGraph)obj);
        }

        /// <summary>
        /// Returns true if ActivityGraph instances are equal
        /// </summary>
        /// <param name="other">Instance of ActivityGraph to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActivityGraph? other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Code == other.Code ||
                    Code != null &&
                    Code.Equals(other.Code)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    IsGroup == other.IsGroup ||
                    IsGroup != null &&
                    IsGroup.Equals(other.IsGroup)
                ) && 
                (
                    Relationship == other.Relationship ||
                    Relationship != null &&
                    Relationship.SequenceEqual(other.Relationship)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Code != null)
                    hashCode = hashCode * 59 + Code.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (IsGroup != null)
                    hashCode = hashCode * 59 + IsGroup.GetHashCode();
                    if (Relationship != null)
                    hashCode = hashCode * 59 + Relationship.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ActivityGraph left, ActivityGraph right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ActivityGraph left, ActivityGraph right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
