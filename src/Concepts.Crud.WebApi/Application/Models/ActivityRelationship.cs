/*
 * Activity Specification
 *
 * API позволяет управлять каталогом действий
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.Runtime.Serialization;
using System.Text;

namespace Concepts.Crud.WebApi.Application.Models
{
    /// <summary>
    /// Базовый класс, определяющий связи  между действиями
    /// </summary>
    [DataContract]
    public partial class ActivityRelationship : IEquatable<ActivityRelationship>
    { 
        /// <summary>
        /// идентификатор связи
        /// </summary>
        /// <value>идентификатор связи</value>

        [DataMember(Name="id")]
        public Guid? Id { get; set; }

        /// <summary>
        /// Gets or Sets RelationshipType
        /// </summary>
        [Required]

        [DataMember(Name="relationshipType")]
        public RelationshipType RelationshipType { get; set; }

        /// <summary>
        /// Gets or Sets TargetSpecification
        /// </summary>
        [Required]

        [DataMember(Name="targetSpecification")]
        public EntityRef TargetSpecification { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ActivityRelationship {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RelationshipType: ").Append(RelationshipType).Append("\n");
            sb.Append("  TargetSpecification: ").Append(TargetSpecification).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonSerializer.Serialize(this);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ActivityRelationship)obj);
        }

        /// <summary>
        /// Returns true if ActivityRelationship instances are equal
        /// </summary>
        /// <param name="other">Instance of ActivityRelationship to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActivityRelationship? other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    RelationshipType == other.RelationshipType ||
                    RelationshipType != null &&
                    RelationshipType.Equals(other.RelationshipType)
                ) && 
                (
                    TargetSpecification == other.TargetSpecification ||
                    TargetSpecification != null &&
                    TargetSpecification.Equals(other.TargetSpecification)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (RelationshipType != null)
                    hashCode = hashCode * 59 + RelationshipType.GetHashCode();
                    if (TargetSpecification != null)
                    hashCode = hashCode * 59 + TargetSpecification.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ActivityRelationship left, ActivityRelationship right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ActivityRelationship left, ActivityRelationship right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
